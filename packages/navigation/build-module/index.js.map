{"version":3,"names":["addQueryArgs","parse","pick","uniq","applyFilters","getHistory","navUtils","getPath","location","pathname","getPersistedQuery","query","arguments","length","undefined","getQuery","params","getIdsFromQuery","queryString","split","map","id","parseInt","filter","Boolean","getSearchWords","_typeof","Error","search","searchWord","replace","getNewPath","path","currentQuery","args","_objectSpread","substring","onQueryChange","param","key","dir","updateQueryString","orderby","order","queryParam","ids","_updateQueryString","_defineProperty","concat","value","newPath","push"],"sources":["/home/users/vikas.reactjs/www/html/king/wp-content/plugins/woo-point-of-sale/packages/navigation/src/index.js"],"sourcesContent":["/** @format */\n/**\n * External dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport { parse } from 'qs';\nimport { pick, uniq } from 'lodash';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { getHistory } from './history';\n\n// Expose history so all uses get the same history object.\nexport { getHistory };\n\n// Export all filter utilities\nexport * from './filters';\n\n/**\n * Internal dependencies\n */\n// Import the module into itself. Functions consumed from this import can be mocked in tests.\nimport * as navUtils from './index';\n\n/**\n * Get the current path from history.\n *\n * @return {String}  Current path.\n */\nexport const getPath = () => getHistory().location.pathname;\n\n/**\n * Gets query parameters that should persist between screens or updates\n * to reports, such as filtering.\n *\n * @param {Object} query Query containing the parameters.\n * @return {Object} Object containing the persisted queries.\n */\nexport const getPersistedQuery = (query = navUtils.getQuery()) => {\n    const params = applyFilters( 'woocommerce_admin_persisted_queries', [\n\t\t'period',\n\t\t'compare',\n\t\t'before',\n\t\t'after',\n\t\t'interval',\n\t\t'type',\n\t] );\n\treturn pick( query, params );\n};\n\n/**\n * Get an array of IDs from a comma-separated query parameter.\n *\n * @param {string} queryString string value extracted from URL.\n * @return {Array} List of IDs converted to numbers.\n */\nexport function getIdsFromQuery(queryString = '') {\n    return uniq(\n\t\tqueryString\n\t\t\t.split( ',' )\n\t\t\t.map( id => parseInt( id, 10 ) )\n\t\t\t.filter( Boolean )\n\t);\n}\n\n/**\n * Get an array of searched words given a query.\n *\n * @param {Object} query Query object.\n * @return {Array} List of search words.\n */\nexport function getSearchWords(query = navUtils.getQuery()) {\n    if ( typeof query !== 'object' ) {\n\t\tthrow new Error(\n\t\t\t'Invalid parameter passed to getSearchWords, it expects an object or no parameters.'\n\t\t);\n\t}\n\tconst { search } = query;\n\tif ( ! search ) {\n\t\treturn [];\n\t}\n\tif ( typeof search !== 'string' ) {\n\t\tthrow new Error(\n\t\t\t\"Invalid 'search' type. getSearchWords expects query's 'search' property to be a string.\"\n\t\t);\n\t}\n\treturn search.split( ',' ).map( searchWord => searchWord.replace( '%2C', ',' ) );\n}\n\n\n/**\n * Return a URL with set query parameters.\n *\n * @param {Object} query object of params to be updated.\n * @param {String} path Relative path (defaults to current path).\n * @param {Object} currentQuery object of current query params (defaults to current querystring).\n * @return {String}  Updated URL merging query params into existing params.\n */\nexport function getNewPath(query, path = getPath(), currentQuery = getQuery()) {\n    const args = { ...currentQuery, ...query };\n\tif ( '/' !== path ) {\n\t\targs.path = path;\n\t}\n\n\treturn addQueryArgs( '', args );\n}\n\n/**\n * Get the current query string, parsed into an object, from history.\n *\n * @return {Object}  Current query object, defaults to empty object.\n */\nexport function getQuery() {\n    const search = getHistory().location.search;\n\tif ( search.length ) {\n\t\treturn parse( search.substring( 1 ) ) || {};\n\t}\n\treturn {};\n}\n\n/**\n * This function returns an event handler for the given `param`\n *\n * @param {string} param The parameter in the querystring which should be updated (ex `page`, `per_page`)\n * @param {string} path Relative path (defaults to current path).\n * @param {string} query object of current query params (defaults to current querystring).\n * @return {function} A callback which will update `param` to the passed value when called.\n */\nexport function onQueryChange(param, path = getPath(), query = getQuery()) {\n    switch ( param ) {\n\t\tcase 'sort':\n\t\t\treturn ( key, dir ) => updateQueryString( { orderby: key, order: dir }, path, query );\n\t\tcase 'compare':\n\t\t\treturn ( key, queryParam, ids ) =>\n\t\t\t\tupdateQueryString(\n\t\t\t\t\t{\n\t\t\t\t\t\t[ queryParam ]: `compare-${ key }`,\n\t\t\t\t\t\t[ key ]: ids,\n\t\t\t\t\t\tsearch: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tpath,\n\t\t\t\t\tquery\n\t\t\t\t);\n\t\tdefault:\n\t\t\treturn value => updateQueryString( { [ param ]: value }, path, query );\n\t}\n}\n\n/**\n * Updates the query parameters of the current page.\n *\n * @param {Object} query object of params to be updated.\n * @param {String} path Relative path (defaults to current path).\n * @param {Object} currentQuery object of current query params (defaults to current querystring).\n */\nexport function updateQueryString(query, path = getPath(), currentQuery = getQuery()) {\n    const newPath = getNewPath( query, path, currentQuery );\n\tgetHistory().push( newPath );\n}\n"],"mappings":"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"}